name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, nightly]
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2

      # Test with default features
      - name: Run tests (default features)
        run: cargo test --verbose

      # Test with no default features (no_std)
      - name: Run tests (no_std)
        run: cargo test --no-default-features --verbose

      # Test with all features
      - name: Run tests (all features)
        run: cargo test --all-features --verbose

      # Test each allocator feature separately
      - name: Run tests (bumpalo)
        run: cargo test --features allocator-bumpalo --verbose

      - name: Run tests (typed-arena)
        run: cargo test --features allocator-typed-arena --verbose

      # Build docs
      - name: Build documentation
        run: cargo doc --no-deps --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --all-targets --all-features -- -D warnings

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  miri:
    name: Miri
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri
      - uses: Swatinem/rust-cache@v2

      # Run Miri on library tests (unsafe code validation)
      - name: Run Miri tests
        run: |
          cargo miri setup
          cargo miri test --lib
        env:
          MIRIFLAGS: -Zmiri-strict-provenance

  minimal-versions:
    name: Minimal versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
      - run: cargo generate-lockfile -Z minimal-versions
      - run: cargo test --all-features